Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Start
Rule 1     Start -> foreach
Rule 2     Start -> foreach Start
Rule 3     foreach -> var ASSIGN var BEGIN statementlist END
Rule 4     statementlist -> statement SEMICOLUMN statementlist
Rule 5     statementlist -> statement SEMICOLUMN
Rule 6     statement -> var EQUAL expr
Rule 7     statement -> functioncall
Rule 8     expr -> var PLUS expr
Rule 9     expr -> var MINUS expr
Rule 10    expr -> var MULTIPLY expr
Rule 11    expr -> var DIVID expr
Rule 12    expr -> var
Rule 13    expr -> OPENPRACS expr CLOSEPRACS
Rule 14    functioncall -> VAR OPENPRACS parameterList CLOSEPRACS
Rule 15    parameterList -> parameter
Rule 16    parameterList -> parameter COMMA parameterList
Rule 17    parameter -> expr
Rule 18    var -> VAR
Rule 19    var -> constant
Rule 20    constant -> INT
Rule 21    constant -> FLOAT

Terminals, with rules where they appear

ASSIGN               : 3
BEGIN                : 3
CLOSEPRACS           : 13 14
COMMA                : 16
DIVID                : 11
END                  : 3
EQUAL                : 6
FLOAT                : 21
INT                  : 20
MINUS                : 9
MULTIPLY             : 10
OPENPRACS            : 13 14
PLUS                 : 8
SEMICOLUMN           : 4 5
VAR                  : 14 18
error                : 

Nonterminals, with rules where they appear

Start                : 2 0
constant             : 19
expr                 : 6 8 9 10 11 13 17
foreach              : 1 2
functioncall         : 7
parameter            : 15 16
parameterList        : 14 16
statement            : 4 5
statementlist        : 3 4
var                  : 3 3 6 8 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . Start
    (1) Start -> . foreach
    (2) Start -> . foreach Start
    (3) foreach -> . var ASSIGN var BEGIN statementlist END
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    Start                          shift and go to state 5
    foreach                        shift and go to state 4
    var                            shift and go to state 6

state 1

    (21) constant -> FLOAT .

    PLUS            reduce using rule 21 (constant -> FLOAT .)
    MINUS           reduce using rule 21 (constant -> FLOAT .)
    MULTIPLY        reduce using rule 21 (constant -> FLOAT .)
    DIVID           reduce using rule 21 (constant -> FLOAT .)
    COMMA           reduce using rule 21 (constant -> FLOAT .)
    CLOSEPRACS      reduce using rule 21 (constant -> FLOAT .)
    SEMICOLUMN      reduce using rule 21 (constant -> FLOAT .)
    ASSIGN          reduce using rule 21 (constant -> FLOAT .)
    EQUAL           reduce using rule 21 (constant -> FLOAT .)
    BEGIN           reduce using rule 21 (constant -> FLOAT .)


state 2

    (18) var -> VAR .

    ASSIGN          reduce using rule 18 (var -> VAR .)
    PLUS            reduce using rule 18 (var -> VAR .)
    MINUS           reduce using rule 18 (var -> VAR .)
    MULTIPLY        reduce using rule 18 (var -> VAR .)
    DIVID           reduce using rule 18 (var -> VAR .)
    COMMA           reduce using rule 18 (var -> VAR .)
    CLOSEPRACS      reduce using rule 18 (var -> VAR .)
    SEMICOLUMN      reduce using rule 18 (var -> VAR .)
    BEGIN           reduce using rule 18 (var -> VAR .)


state 3

    (19) var -> constant .

    ASSIGN          reduce using rule 19 (var -> constant .)
    PLUS            reduce using rule 19 (var -> constant .)
    MINUS           reduce using rule 19 (var -> constant .)
    MULTIPLY        reduce using rule 19 (var -> constant .)
    DIVID           reduce using rule 19 (var -> constant .)
    COMMA           reduce using rule 19 (var -> constant .)
    CLOSEPRACS      reduce using rule 19 (var -> constant .)
    SEMICOLUMN      reduce using rule 19 (var -> constant .)
    BEGIN           reduce using rule 19 (var -> constant .)
    EQUAL           reduce using rule 19 (var -> constant .)


state 4

    (1) Start -> foreach .
    (2) Start -> foreach . Start
    (1) Start -> . foreach
    (2) Start -> . foreach Start
    (3) foreach -> . var ASSIGN var BEGIN statementlist END
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    $end            reduce using rule 1 (Start -> foreach .)
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    Start                          shift and go to state 8
    foreach                        shift and go to state 4
    var                            shift and go to state 6

state 5

    (0) S' -> Start .



state 6

    (3) foreach -> var . ASSIGN var BEGIN statementlist END

    ASSIGN          shift and go to state 9


state 7

    (20) constant -> INT .

    PLUS            reduce using rule 20 (constant -> INT .)
    MINUS           reduce using rule 20 (constant -> INT .)
    MULTIPLY        reduce using rule 20 (constant -> INT .)
    DIVID           reduce using rule 20 (constant -> INT .)
    COMMA           reduce using rule 20 (constant -> INT .)
    CLOSEPRACS      reduce using rule 20 (constant -> INT .)
    SEMICOLUMN      reduce using rule 20 (constant -> INT .)
    ASSIGN          reduce using rule 20 (constant -> INT .)
    EQUAL           reduce using rule 20 (constant -> INT .)
    BEGIN           reduce using rule 20 (constant -> INT .)


state 8

    (2) Start -> foreach Start .

    $end            reduce using rule 2 (Start -> foreach Start .)


state 9

    (3) foreach -> var ASSIGN . var BEGIN statementlist END
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 10

state 10

    (3) foreach -> var ASSIGN var . BEGIN statementlist END

    BEGIN           shift and go to state 11


state 11

    (3) foreach -> var ASSIGN var BEGIN . statementlist END
    (4) statementlist -> . statement SEMICOLUMN statementlist
    (5) statementlist -> . statement SEMICOLUMN
    (6) statement -> . var EQUAL expr
    (7) statement -> . functioncall
    (18) var -> . VAR
    (19) var -> . constant
    (14) functioncall -> . VAR OPENPRACS parameterList CLOSEPRACS
    (20) constant -> . INT
    (21) constant -> . FLOAT

    VAR             shift and go to state 13
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    statement                      shift and go to state 12
    constant                       shift and go to state 3
    functioncall                   shift and go to state 16
    statementlist                  shift and go to state 14
    var                            shift and go to state 15

state 12

    (4) statementlist -> statement . SEMICOLUMN statementlist
    (5) statementlist -> statement . SEMICOLUMN

    SEMICOLUMN      shift and go to state 17


state 13

    (18) var -> VAR .
    (14) functioncall -> VAR . OPENPRACS parameterList CLOSEPRACS

    EQUAL           reduce using rule 18 (var -> VAR .)
    OPENPRACS       shift and go to state 18


state 14

    (3) foreach -> var ASSIGN var BEGIN statementlist . END

    END             shift and go to state 19


state 15

    (6) statement -> var . EQUAL expr

    EQUAL           shift and go to state 20


state 16

    (7) statement -> functioncall .

    SEMICOLUMN      reduce using rule 7 (statement -> functioncall .)


state 17

    (4) statementlist -> statement SEMICOLUMN . statementlist
    (5) statementlist -> statement SEMICOLUMN .
    (4) statementlist -> . statement SEMICOLUMN statementlist
    (5) statementlist -> . statement SEMICOLUMN
    (6) statement -> . var EQUAL expr
    (7) statement -> . functioncall
    (18) var -> . VAR
    (19) var -> . constant
    (14) functioncall -> . VAR OPENPRACS parameterList CLOSEPRACS
    (20) constant -> . INT
    (21) constant -> . FLOAT

    END             reduce using rule 5 (statementlist -> statement SEMICOLUMN .)
    VAR             shift and go to state 13
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    statement                      shift and go to state 12
    constant                       shift and go to state 3
    functioncall                   shift and go to state 16
    var                            shift and go to state 15
    statementlist                  shift and go to state 21

state 18

    (14) functioncall -> VAR OPENPRACS . parameterList CLOSEPRACS
    (15) parameterList -> . parameter
    (16) parameterList -> . parameter COMMA parameterList
    (17) parameter -> . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    expr                           shift and go to state 24
    parameterList                  shift and go to state 26
    var                            shift and go to state 25
    parameter                      shift and go to state 23

state 19

    (3) foreach -> var ASSIGN var BEGIN statementlist END .

    VAR             reduce using rule 3 (foreach -> var ASSIGN var BEGIN statementlist END .)
    INT             reduce using rule 3 (foreach -> var ASSIGN var BEGIN statementlist END .)
    FLOAT           reduce using rule 3 (foreach -> var ASSIGN var BEGIN statementlist END .)
    $end            reduce using rule 3 (foreach -> var ASSIGN var BEGIN statementlist END .)


state 20

    (6) statement -> var EQUAL . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 25
    expr                           shift and go to state 27

state 21

    (4) statementlist -> statement SEMICOLUMN statementlist .

    END             reduce using rule 4 (statementlist -> statement SEMICOLUMN statementlist .)


state 22

    (13) expr -> OPENPRACS . expr CLOSEPRACS
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 25
    expr                           shift and go to state 28

state 23

    (15) parameterList -> parameter .
    (16) parameterList -> parameter . COMMA parameterList

    CLOSEPRACS      reduce using rule 15 (parameterList -> parameter .)
    COMMA           shift and go to state 29


state 24

    (17) parameter -> expr .

    COMMA           reduce using rule 17 (parameter -> expr .)
    CLOSEPRACS      reduce using rule 17 (parameter -> expr .)


state 25

    (8) expr -> var . PLUS expr
    (9) expr -> var . MINUS expr
    (10) expr -> var . MULTIPLY expr
    (11) expr -> var . DIVID expr
    (12) expr -> var .

    PLUS            shift and go to state 31
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 33
    DIVID           shift and go to state 32
    COMMA           reduce using rule 12 (expr -> var .)
    CLOSEPRACS      reduce using rule 12 (expr -> var .)
    SEMICOLUMN      reduce using rule 12 (expr -> var .)


state 26

    (14) functioncall -> VAR OPENPRACS parameterList . CLOSEPRACS

    CLOSEPRACS      shift and go to state 34


state 27

    (6) statement -> var EQUAL expr .

    SEMICOLUMN      reduce using rule 6 (statement -> var EQUAL expr .)


state 28

    (13) expr -> OPENPRACS expr . CLOSEPRACS

    CLOSEPRACS      shift and go to state 35


state 29

    (16) parameterList -> parameter COMMA . parameterList
    (15) parameterList -> . parameter
    (16) parameterList -> . parameter COMMA parameterList
    (17) parameter -> . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    expr                           shift and go to state 24
    parameterList                  shift and go to state 36
    var                            shift and go to state 25
    parameter                      shift and go to state 23

state 30

    (9) expr -> var MINUS . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 25
    expr                           shift and go to state 37

state 31

    (8) expr -> var PLUS . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 25
    expr                           shift and go to state 38

state 32

    (11) expr -> var DIVID . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 25
    expr                           shift and go to state 39

state 33

    (10) expr -> var MULTIPLY . expr
    (8) expr -> . var PLUS expr
    (9) expr -> . var MINUS expr
    (10) expr -> . var MULTIPLY expr
    (11) expr -> . var DIVID expr
    (12) expr -> . var
    (13) expr -> . OPENPRACS expr CLOSEPRACS
    (18) var -> . VAR
    (19) var -> . constant
    (20) constant -> . INT
    (21) constant -> . FLOAT

    OPENPRACS       shift and go to state 22
    VAR             shift and go to state 2
    INT             shift and go to state 7
    FLOAT           shift and go to state 1

    constant                       shift and go to state 3
    var                            shift and go to state 25
    expr                           shift and go to state 40

state 34

    (14) functioncall -> VAR OPENPRACS parameterList CLOSEPRACS .

    SEMICOLUMN      reduce using rule 14 (functioncall -> VAR OPENPRACS parameterList CLOSEPRACS .)


state 35

    (13) expr -> OPENPRACS expr CLOSEPRACS .

    COMMA           reduce using rule 13 (expr -> OPENPRACS expr CLOSEPRACS .)
    CLOSEPRACS      reduce using rule 13 (expr -> OPENPRACS expr CLOSEPRACS .)
    SEMICOLUMN      reduce using rule 13 (expr -> OPENPRACS expr CLOSEPRACS .)


state 36

    (16) parameterList -> parameter COMMA parameterList .

    CLOSEPRACS      reduce using rule 16 (parameterList -> parameter COMMA parameterList .)


state 37

    (9) expr -> var MINUS expr .

    COMMA           reduce using rule 9 (expr -> var MINUS expr .)
    CLOSEPRACS      reduce using rule 9 (expr -> var MINUS expr .)
    SEMICOLUMN      reduce using rule 9 (expr -> var MINUS expr .)


state 38

    (8) expr -> var PLUS expr .

    COMMA           reduce using rule 8 (expr -> var PLUS expr .)
    CLOSEPRACS      reduce using rule 8 (expr -> var PLUS expr .)
    SEMICOLUMN      reduce using rule 8 (expr -> var PLUS expr .)


state 39

    (11) expr -> var DIVID expr .

    COMMA           reduce using rule 11 (expr -> var DIVID expr .)
    CLOSEPRACS      reduce using rule 11 (expr -> var DIVID expr .)
    SEMICOLUMN      reduce using rule 11 (expr -> var DIVID expr .)


state 40

    (10) expr -> var MULTIPLY expr .

    COMMA           reduce using rule 10 (expr -> var MULTIPLY expr .)
    CLOSEPRACS      reduce using rule 10 (expr -> var MULTIPLY expr .)
    SEMICOLUMN      reduce using rule 10 (expr -> var MULTIPLY expr .)

